// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Subscription fields
  subscriptionId String?
  planId         String?
  quotaUsed      Int       @default(0)
  quotaLimit     Int       @default(20) // Free plan default
  
  // Relations
  accounts      Account[]
  sessions      Session[]
  uploads       Upload[]
  generations   Generation[]
  subscription  Subscription?
  
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Upload {
  id          String   @id @default(cuid())
  userId      String
  title       String
  type        String   // "blog", "podcast", "video"
  content     String?  // For blog posts
  fileUrl     String?  // For audio/video files
  transcript  String?  // Extracted transcript
  metadata    Json?    // Additional metadata
  status      String   @default("processing") // "processing", "completed", "failed"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  generations  Generation[]
  
  @@map("uploads")
}

model Generation {
  id          String   @id @default(cuid())
  userId      String
  uploadId    String
  type        String   // "social", "email", "linkedin", "youtube"
  content     String
  prompt      String?
  tokensUsed  Int?
  createdAt   DateTime @default(now())
  
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  upload  Upload @relation(fields: [uploadId], references: [id], onDelete: Cascade)
  
  @@map("generations")
}

model Plan {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Int      // Price in cents
  quota       Int      // Monthly quota
  features    Json?    // Additional features
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  subscriptions Subscription[]
  
  @@map("plans")
}

model Subscription {
  id                String   @id @default(cuid())
  userId            String   @unique
  planId            String
  stripeCustomerId  String?
  stripeSubscriptionId String?
  status            String   // "active", "canceled", "past_due", etc.
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan Plan @relation(fields: [planId], references: [id])
  
  @@map("subscriptions")
}
